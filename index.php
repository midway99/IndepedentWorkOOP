
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
<?php
class Figure
{
    CONST SIZE_OF_PARTIES = 4;
    private $area;
    private $color = 'WHITE';

    public function infoAbout()
    {
        return print_r("Это геометрическая фигура!");
    }

}

class  Rectangle extends Figure
{
    const  SIZE_OF_PARTIES = 4;
    const  NAME_OF_FIGURE = "прямогульник";
    //длины сторон
    private $a = 2;
    private $b = 3;

    public function __construct($a, $b)
    {
        $this->a = $a;
        $this->b = $b;
    }

    public function getArea()
    {
        return "Площадь прямоуглоьника = " . $this->a * $this->b;
    }

    public final function infoAbout()
    {
        return parent::infoAbout(); // TODO: Change the autogenerated stub
        echo 'Это класс' . $this::NAME_OF_FIGURE . '. У него' . SIZE_OF_PARTIES  . 'стороны';
    }
}


class  Triangle extends Figure
{
    const  SIZE_OF_PARTIES = 3;
    const NAME_OF_FIGURE = "треугольник";
    //длина стороны
    private $a = 3;
    private $b = 5;
    private $c = 6;


    public function __construct($a, $b, $c)
    {
        $this->a = $a;
        $this->b = $b;
        $this->c = $c;
    }

    //функция для определния площади треугольника
    function geron($a, $b, $c)
    {
        $p = ($a + $b + $c) / 2;
        return sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));
    }

    public function getArea()
    {
        return "Площадь треуглоьника = " . $this->geron(5, 6, 7);
    }

    public final function infoAbout()
    {
        return parent::infoAbout(); // TODO: Change the autogenerated stub
        echo "Это класс" . $this::NAME_OF_FIGURE . ". У него" . $this::SIZE_OF_PARTIES . "стороны";
    }
}

class  Square extends Figure
{
    const  SIZE_OF_PARTIES = 4;
    const NAME_OF_FIGURE = "Квадрат";
    //длина сторон
    public $a = 3;

    public function __construct($a)
    {
        $this->a = $a;
    }

    public function getArea()
    {
        return "Площадь квадрата = " . ($this->a * $this->a);
    }

    final public  function infoAbout()
    {
        return parent::infoAbout(); // TODO: Change the autogenerated stub
        echo 'Это класс' . $this::NAME_OF_FIGURE . '. У него' . SIZE_OF_PARTIES  . 'стороны';
    }

}


$rectangleOne = new Rectangle(20, 40);
$rectangleTwo = new Rectangle(30, 60);
$squareOne = new Square(20);
$squareTwo = new Square(30);
$triangleOne = new Triangle(20, 40, 20);
$triangleTwo = new Triangle(30, 60, 10);

echo $rectangleOne->infoAbout().'<br>';
echo $rectangleOne->getArea().'<br>';
echo $rectangleTwo->getArea().'<br>';
echo $squareOne->infoAbout().'<br>';
echo $squareOne->getArea().'<br>';
echo $squareTwo->getArea().'<br>';
echo $triangleOne->infoAbout().'<br>';
echo $triangleOne->getArea().'<br>';
echo $triangleTwo->getArea().'<br>';

$figures[] = new Square(20);
$figures[] = new Square(30);
$figures[] = new Triangle('4', '5', 6);
$figures[] = new Triangle('4', 8, 7);
$figures[] = new Rectangle('4', 8);
$figures[] = new Rectangle('4', 8);
?>
</body>
</html>
